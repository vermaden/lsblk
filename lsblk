#! /bin/sh

LABEL=''
LABEL_SET=0
MOUNT=-
MOUNT_SET=0
SIZE=-
SIZE_SET=0
TYPE=-
TYPE_SET=0
MAMI=-:-
MAMI_SET=0

SPACE=0
PRDE=15
PRMM=7
PRSZ=4
PRTY=18
PRLB=12

if which sudo 1> /dev/null 2> /dev/null
then
  SUDO=sudo
else
  SUDO=""
fi

__data_mami() {
  #     arg: 1=DEV ;
  # example: 1=ada0p1 ;

  MAMI=$( ls -l /dev/${1} | awk 'END{print $5}' | tr 'x' ':' )
  if [ "${MAMI}" = "0," ]
  then
    MAMI=$( ls -l /dev/${1} | awk 'END{print $5"x"$6 }' | tr -d ',' | tr 'x' ':' )
  fi
  if [ "${MAMI}" = "" ]
  then
    MAMI="-:-"
  fi
  MAMI_SET=1
} # __data_mami()



__data_type_geli() {
  #     arg: 1=DEV ;
  # example: 1=ada0p1 ;

  local PLAIN_DEV=$( echo ${1} | sed 's|.eli||g' )
  local TYPE_GELI=$( geli list 2> /dev/null | grep -v ".eli$" | grep -E "[0-9]+.\ Name:\ ${PLAIN_DEV}" | awk 'END{print $3}' )
  if [ "${TYPE_GELI}.eli" = "${1}" ]
  then
    TYPE=geli
    TYPE_SET=1
  fi
} # __data_type_geli()



__data_type_zfs() {
  #     arg: 1=DEV ;
  # example: 1=ada0p1 ;

  if head -c 100000 /dev/${DEV} | strings | grep -q pool_guid 1> /dev/null 2> /dev/null
  then
    TYPE=freebsd-zfs
    TYPE_SET=1
    # ZFS USUALLY HAVE LOTS OF MOUNT POINTS SO USE '<ZFS>' HERE
    MOUNT="<ZFS>"
    MOUNT_SET=1
  fi
} # __data_type_zfs()



__data_type_ufs() {
  #     arg: 1=DEV ;
  # example: 1=ada0p1 ;
  local DUMP=$( dumpfs /dev/${1} 2> /dev/null | grep "magic" | grep "(UFS2)" | grep -o UFS )
  if [ "${DUMP}" = "UFS" ]
  then
    TYPE=freebsd-ufs
    TYPE_SET=1
  fi
} # __data_type_ufs()



__data_type_swap() {
  #     arg: 1=DEV ;
  # example: 1=ada0p1 ;
  local PLAIN_DEV=$( echo ${1} | grep -E -o "[a-z]+[0-9]+[a-z][0-9]+" )
  if [ "${PLAIN_DEV}" != "" ]
  then
    local LETTER=$( echo ${1} | sed "s|${PLAIN_DEV}||g" )
    if [ "$( echo LETTER | wc -l | tr -d ' ' )" = "1" ]
    then
      local FSTYPE=$( bsdlabel ${PLAIN_DEV} 2> /dev/null | grep -A 256 offset | grep "${LETTER}:" | awk 'END{print $4}' )
      if [ "${FSTYPE}" = "swap" ]
      then
        TYPE=freebsd-swap
        TYPE_SET=1
      fi
    fi
  fi
} # __data_type_swap()



__data_type_fstyp() {
  #     arg: 1=DEV ;
  # example: 1=ada0p1 ;

  if which fstyp 1> /dev/null 2> /dev/null
  then
    TYPE=$( fstyp /dev/${DEV} 2> /dev/null )
    if [ "${TYPE}" = "" ]
    then
      TYPE="-"
    else
      TYPE_SET=1
    fi
  fi
} # __data_type_zfs()



__data_type_size() {
  #     arg: 1=DEV ;
  # example: 1=ada0p1 ;

  local DEV_BASE_NAME=$( echo "${1}" | grep -E -o '[a-z]+[0-9]+' | head -1 )

  # begin GPART SHOW
  if gpart show ${1} 2> /dev/null | grep -q "${1}" 1> /dev/null 2> /dev/null
  then

    GPART_SHOW=$( gpart show ${1} 2> /dev/null )

    # begin TYPE
    if [ ${TYPE_SET} -eq 0 ]
    then
      TYPE=$( echo "${GPART_SHOW}" | head -1 | awk '{print $5}' )
      if [ "${TYPE}" != "" -a ${TYPE_SET} -eq 0 ]
      then
        TYPE_SET=1
      fi
    fi
    # end TYPE

    # begin SIZE
    if [ ${SIZE_SET} -eq 0 ]
    then
      SIZE=$( echo "${GPART_SHOW}" | grep -m 1 -E -o "\([0-9]+[a-z]*[A-Z]*\)" | tr -d '()' )
      if [ "${SIZE}" != "" -a ${SIZE_SET} -eq 0 ]
      then
        SIZE_SET=1
      fi
    fi
    # end SIZE

  fi
  # end GPART SHOW

  # BASE END ------------------------------------------------------------

  # begin GPART LIST
  if gpart list ${DEV_BASE_NAME} 1> /dev/null 2> /dev/null
  then
    local GPART_LIST="$( gpart list ${DEV_BASE_NAME} 2> /dev/null )"
    if [ "${DEV_BASE_NAME}" != "${1}" ]
    then

      # TYPE
      if [ ${TYPE_SET} -eq 0 ]
      then
        local PLAIN_DEV=$( echo ${1} | sed 's|.eli||g' )
        TYPE=$( echo "${GPART_LIST}" \
                  | grep -A 256 "${PLAIN_DEV}$" \
                  | grep -m 2 -B 256 -E "^[0-9]+.\ Name:\ " \
                  | sed '$d' \
                  | grep -m 1 "\ type:\ " \
                  | awk '{print $2}' )
        if [ "${TYPE}" != "" ]
        then
          TYPE_SET=1
        fi
      fi

      # SIZE
      if [ ${SIZE_SET} -eq 0 ]
      then
        local PLAIN_DEV=$( echo ${1} | sed 's|.eli||g' )
        SIZE=$( gpart list \
                  | grep -A 256 ${PLAIN_DEV} \
                  | grep -m 1 -B 256 "Mediasize:\ " \
                  | grep -E -o "\(.*\)" \
                  | tr -d '()' )
        if [ "${SIZE}" != "" ]
        then
          SIZE_SET=1
        fi
      fi
    fi

  fi
  # end GPART LIST

  # TYPE
  if [ ${TYPE_SET} -eq 0 ]
  then
    __data_type_geli ${1}
  fi

  if [ ${TYPE_SET} -eq 0 ]
  then
    __data_type_zfs ${1}
  fi

  if [ ${TYPE_SET} -eq 0 ]
  then
    __data_type_ufs ${1}
  fi

  if [ ${TYPE_SET} -eq 0 ]
  then
    __data_type_swap ${1}
  fi

  if [ ${TYPE_SET} -eq 0 ]
  then
    __data_type_fstyp ${1}
  fi

  if [ ${TYPE_SET} -eq 0 ]
  then
    TYPE=-
    TYPE_SET=1
  fi

  # begin SIZE
  if [ ${SIZE_SET} -eq 0 ]
  then
    SIZE=$( dmesg | grep -E "^${1}:.*sectors:" | awk 'END{print $2}' | tr -d 'MB' )
    if [ "${SIZE}" = "" ]
    then
      # IF DMESG INFORMATION IS ABSENT THEN TRY /var/run/dmesg.boot FILE
      if [ -e /var/run/dmesg.boot ]
      then
        SIZE=$( grep -E "^${1}:.*sectors:" /var/run/dmesg.boot | awk 'END{print $2}' | tr -d 'MB' )
        # IF SIZE INFO STILL NOT THERE THEN SET AS '-'
        if [ "${SIZE}" = "" ]
        then
          SIZE="-"
          SIZE_SET=1
        fi
      fi
    fi
    # IF SIZE IS DETECTED THEN FORMAT IT PROPERLY
    if [ "${SIZE}" != "-" ]
    then
      SIZE="$(( ${SIZE} / 1024 ))G"
      SIZE_SET=1
    fi

  fi
  # end SIZE

  if [ ${SIZE_SET} -eq 0 ]
  then
    SIZE=-
    SIZE_SET=1
  fi

} # __data_type_size()



__data_label() {
  #     arg: 1=DEV ;
  # example: 1=ada0p1 ;

  # SCHEME
  case "${TYPE}" in
    (BSD|GPT|MBR)
      LABEL=-
      LABEL_SET=1
      return
      ;;
  esac

  # GPART LIST
  local DEV_BASE_NAME=$( echo "${1}" | grep -E -o '[a-z]+[0-9]+' | head -1 )
  if [ "${DEV_BASE_NAME}" != "${1}" ]
  then
    if gpart list ${DEV_BASE_NAME} 1> /dev/null 2> /dev/null
    then
      local LABEL_TMP=$( gpart list ${DEV_BASE_NAME} 2> /dev/null \
                     | grep -A 256 ${1} \
                     | grep -m 1 -B 256 'label:\ ' \
                     | awk 'END{print $2}' )
      if [ "${LABEL_TMP}" != "" ]
      then
        LABEL="${LABEL_TMP} ${LABEL}"
        local LABEL_SET=1
      fi
      local LABEL_TMP=''
    fi
  fi

  # GLABEL LIST
  local LABEL_TMP=$( glabel list \
                 | grep -A 256 "Geom name: ${1}" \
                 | grep -m 1 -B 256 -E "[0-9]+.\ Name:\ " \
                 | awk 'END{print $3}' )
  if [ "${LABEL_TMP}" != "" ]
  then
    LABEL="${LABEL_TMP} ${LABEL}"
    LABEL_SET=1
  fi
  local LABEL_TMP=''

  # TUNEFS
  local LABEL_TMP=$( tunefs -p /dev/${1} 2>&1 \
                 | grep -v MAC \
                 | grep 'label:' \
                 | awk 'END{print $5}' )
  if [ "${LABEL_TMP}" != "" ]
  then
    LABEL="${LABEL_TMP} ${LABEL}"
    LABEL_SET=1
  fi
  local LABEL_TMP=''

  # FILE / FAT
  local LABEL_TMP=$( file -s /dev/${1} \
                 | grep FAT \
                 | grep -o -E ',\ label:\ \".*\"' \
                 | awk -F '"' 'END{print $2}' )
  if [ "${LABEL_TMP}" != "" ]
  then
    LABEL="msdosfs/${LABEL_TMP} ${LABEL}"
    LABEL_SET=1
  fi
  local LABEL_TMP=''

  # FSTYP / FAT
  if which fstyp 1> /dev/null 2> /dev/null
  then
    local LABEL_TMP=$( fstyp -l /dev/${1} 2> /dev/null | awk 'END{print $2}' )
    if [ "${LABEL_TMP}" != "" ]
    then
      LABEL="msdosfs/${LABEL_TMP} ${LABEL}"
      LABEL_SET=1
    fi
    local LABEL_TMP=''
  fi

  # LABEL NOT SET
  if [ ${LABEL_SET} -eq 0 ]
  then
    LABEL=-
  fi

} # __data_label()



__data_mount() {
  #     arg: 1=LIST_OF_TARGETS ;
  # example: 1="ada0p1 label/home gpt/usr" ;

  for ELEMENT in ${1}
  do

    # EXIT ON EMPTY LIST
    if [ "${1}" = "-" ]
    then
      break
    fi

    # SCHEME
    case "${TYPE}" in
      (BSD|GPT|MBR)
        MOUNT=-
        MOUNT_SET=1
        return
        ;;
    esac

    # FS / mount
    MOUNT=$( mount | grep /dev/${ELEMENT} | awk 'END{print $3}' )
    if [ "${MOUNT}" != "" ]
    then
      MOUNT_SET=1
      return
    fi

    # FS / dumpfs
    MOUNT=$( dumpfs /dev/${ELEMENT} 2> /dev/null | awk '/^fsmnt/ {print $2}' )
    if [ "${MOUNT}" != "" ]
    then
      MOUNT_SET=1
      return
    fi

    # SWAP / swapinfo
    if swapinfo | grep -q ${ELEMENT}
    then
      MOUNT="SWAP"
      MOUNT_SET=1
      if [ ${TYPE_SET} -eq 0 ]
      then
        TYPE=freebsd-swap
        TYPE_SET=1
      fi
      return
    fi

    # ZFS
    if [ "${TYPE}" = "freebsd-zfs" ]
    then
      MOUNT="<ZFS>"
      MOUNT_SET=1
      return
    fi

  done

  # IF WE GOT HERE THEN ITS NOT MOUNTED
  MOUNT=-
  MOUNT_SET=1
} # __data_mount()



__data() {
  #     arg: 1=TARGET ;
  # example: 1=ada0p1 ;

  # MAJOR/MINOR NUMBERS
  if [ ${MAMI_SET} -eq 0 ]
  then
    __data_mami ${1}
  fi

  # TYPE
  # SIZE
  __data_type_size ${1}

  # LABEL
  if [ ${LABEL_SET} -eq 0 ]
  then
    __data_label ${1}
  fi

  # MOUNT
  if [ ${MOUNT_SET} -eq 0 ]
  then
    __data_mount "${1} ${LABEL}"
  fi

  # glabel list | grep ${VARIANT}
  # Geom name: ada0p4
  # Providers:
  # 1. Name: gpt/local.zil
  #    Mediasize: 4294967296 (4.0G)
  # --
  # Consumers:
  # 1. Name: ada0p4
  #    Mediasize: 4294967296 (4.0G)

} # __data()

printf "%-${PRDE}s %${PRMM}s %${PRSZ}s %-${PRTY}s %${PRLB}s %s\n" DEVICE MA:MI SIZE TYPE LABEL MOUNT

( ${SUDO} atacontrol list 2> /dev/null \
    | grep '<' \
    | awk '{print $2}'

  sysctl -n kern.disks \
    | tr ' ' '\n' \
    | while read DEV
      do
        echo /dev/${DEV}* \
          | sed 's|/dev/||g' \
          | tr ' ' '\n'
      done
) \
  | sort -n \
  | while read VARIANT
    do
      __data ${VARIANT}
      LABEL=$( echo ${LABEL} | awk '{print $NF}' )
      DEV_BASE_NAME=$( echo "${VARIANT}" | grep -E -o '[a-z]+[0-9]+' | head -1 )
      if [ "${DEV_BASE_NAME}" != "${1}" ]
      then
        # grep -o -E "([a-z]+[0-9]+[a-z]*)*"
        DEPTH=$( echo ${VARIANT} | grep -o -E "[a-z]+[0-9]+" | wc -l | tr -d ' ' )
        if echo ${VARIANT} | grep -E -q "[a-z]+$"
        then
          DEPTH=$(( ${DEPTH} + 1 ))
        fi
      fi
      case ${DEPTH} in
        (1)
          SPACE=0
          PRDE=15
          ;;
        (2)
          SPACE=2
          PRDE=13
          ;;
        (3)
          SPACE=4
          PRDE=11
          ;;
        (4)
          SPACE=6
          PRDE=9
          ;;
      esac

      if [ ${SPACE} -eq 0 ]
      then
        printf "%-${PRDE}s %${PRMM}s %${PRSZ}s %-${PRTY}s %${PRLB}s %s\n" ${VARIANT} ${MAMI} ${SIZE} ${TYPE} ${LABEL} ${MOUNT}
      else
        printf "%${SPACE}s%-${PRDE}s %${PRMM}s %${PRSZ}s %-${PRTY}s %${PRLB}s %s\n" ' ' ${VARIANT} ${MAMI} ${SIZE} ${TYPE} ${LABEL} ${MOUNT}
      fi

      SPACE=0
      PRDE=15
      SIZE=-
      SIZE_SET=0
      TYPE=-
      TYPE_SET=0
      LABEL=''
      LABEL_SET=0
      MOUNT=-
      MOUNT_SET=0
      MAMI=-:-
      MAMI_SET=0
    done
